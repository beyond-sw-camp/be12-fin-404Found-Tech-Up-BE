// 전역 변수 선언
// Jenkins에서는 pipeline 블록 바깥에 선언해야 전역으로 사용 가능
def deployColor = ""
def otherColor = ""
def startTime = 0

def sendDiscordMessage(String title, String description, String color) {
    withCredentials([string(credentialsId: 'Discord-Webhook', variable: 'DISCORD')]) {
        discordSend(
            description: description,
            footer: "Jenkins CI/CD",
            link: env.BUILD_URL,
            result: currentBuild.currentResult,
            title: title,
            color: color,
            webhookURL: "$DISCORD"
        )
    }
}

pipeline {
    agent any

    options {
        timestamps()
    }

    environment {
        IMAGE_NAME = 'mstar228/techup-backend'
        IMAGE_TAG = "1.0.${BUILD_NUMBER}"
        PATH = "/usr/local/bin:${env.PATH}"
        // 크리덴셜에서 환경 변수 가져오기
        DB_URL = credentials('DB_URL')
        DB_USERNAME = credentials('DB_USERNAME')
        DB_PASSWORD = credentials('DB_PASSWORD')
        JWT_SECRET = credentials('JWT_SECRET')
        JWT_EXPIRATION = credentials('JWT_EXPIRATION')
        BACKEND_URL = credentials('BACKEND_URL')
        EC2_HOST = "ubuntu@${BACKEND_URL}"
//         KAKAO_CLIENT_ID     = credentials('KAKAO_CLIENT_ID')
//         KAKAO_REDIRECT_URI  = credentials('KAKAO_REDIRECT_URI')
//         PORTONE_CHANNEL_KEY= credentials('PORTONE_CHANNEL_KEY')
//         PORTONE_SECRET     = credentials('PORTONE_SECRET')
//         PORTONE_STOREID    = credentials('PORTONE_STOREID')
//         MAIL_ADDR          = credentials('MAIL_ADDR')
//         MAIL_PASSWORD      = credentials('MAIL_PASSWORD')

        // kubernetes 환경변수
        KUBE_HOST = credentials('KUBE_HOST')
    }

    stages {
        stage('Start Timer') {
            steps {
                script {
                    startTime = System.currentTimeMillis()
                }
            }
        }

        stage('Git Clone') {
            steps {
                echo "Cloning Repository"
                git url: 'https://github.com/beyond-sw-camp/be12-fin-404Found-Tech-Up-BE.git',
                    branch: "${env.GIT_BRANCH.replace('origin/', '')}"
            }
        }

        stage('Gradle Build') {
            steps {
                echo "Building Project"
                sh '''
                    echo "Add Permission"
                    chmod +x ${WORKSPACE}/backend/gradlew
                    echo "Cleaning previous build"
                    rm -rf ${WORKSPACE}/backend/build
                    echo "Running Gradle build"
                    cd ${WORKSPACE}/backend && ./gradlew bootJar
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker Image ${IMAGE_NAME}:${IMAGE_TAG}"
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}", "${WORKSPACE}/backend")
                }
            }
        }

        stage('Push to Registry') {
            steps {
                script {
                    echo "Pushing Docker Image ${IMAGE_NAME}:${IMAGE_TAG} to Registry"
                    withDockerRegistry([credentialsId: 'DOCKER_HUB']) {
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push('latest')
                    }
                }
            }
        }

        stage('Deploy Kafka to K8s') {
            steps {
                script {
                    echo "Deploying Kafka (StatefulSet) to Kubernetes"
                    sh """
                        scp ${WORKSPACE}/backend/k8s/kafka-statefulset.yml ${KUBE_HOST}:/home/test/backend/k8s/
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/backend/k8s/kafka-statefulset.yml'
                    """
                }
            }
        }

        stage('Deploy to EC2') {
            when {
                expression { env.GIT_BRANCH == 'origin/main' }
            }
            steps {
                script {
                    echo "MODIFY DOCKER-COMPOSE.YML"
                    sh """
                        sed -i 's|mstar228/techup-backend:latest|mstar228/techup-backend:${IMAGE_TAG}|' ${WORKSPACE}/backend/docker-compose.yml
                    """

                    echo "CREATE .ENV"
                    sh """
                        ssh -o StrictHostKeyChecking=no ${EC2_HOST} <<EOF
                        cat > /home/ubuntu/.env <<EOL
                        DB_URL=${DB_URL}
                        DB_USERNAME=${DB_USERNAME}
                        DB_PASSWORD=${DB_PASSWORD}
                        JWT_SECRET=${JWT_SECRET}
                        JWT_EXPIRATION=${JWT_EXPIRATION}
                        KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}
                        KAKAO_REDIRECT_URI=${KAKAO_REDIRECT_URI}
                        PORTONE_CHANNEL_KEY=${PORTONE_CHANNEL_KEY}
                        PORTONE_SECRET=${PORTONE_SECRET}
                        PORTONE_STOREID=${PORTONE_STOREID}
                        MAIL_ADDR=${MAIL_ADDR}
                        MAIL_PASSWORD=${MAIL_PASSWORD}
                        EOL
                        EOF
                    """

                    echo "SCP DOCKER-COMPOSE.YML"
                    sh """
                        ssh -o StrictHostKeyChecking=no ${EC2_HOST} "[ -f /home/ubuntu/docker-compose.yml ] && echo 'File exists, overwriting' || echo 'File does not exist'"
                        scp -o StrictHostKeyChecking=no ${WORKSPACE}/backend/docker-compose.yml ${EC2_HOST}:/home/ubuntu/docker-compose.yml
                    """

                    echo "RUN DOCKER-COMPOSE"
                    sh """
                        ssh -o StrictHostKeyChecking=no ${EC2_HOST} <<'EOF'
                        docker-compose -f /home/ubuntu/docker-compose.yml down  # 기존 컨테이너 중지 및 삭제
                        docker-compose -f /home/ubuntu/docker-compose.yml up -d  # 새 컨테이너 실행
                    """
                }
            }
        }

//         stage('Determine Deploy Color') {
//             steps {
//                 script {
//                     try {
//                         def svcSelector = sh(
//                             script: "ssh ${KUBE_HOST} 'kubectl get svc backend-svc -o jsonpath=\"{.spec.selector.app}\"'",
//                             returnStdout: true
//                         ).trim()
//                         echo "Current svc selector: ${svcSelector}"
//
//                         if (svcSelector.contains("green")) {
//                             // Service is pointing to green; new deployment should be blue.
//                             env.DEPLOY_COLOR = 'blue'
//                             env.OTHER_COLOR = 'green'
//                         } else if (svcSelector.contains("blue")) {
//                             // Service is pointing to blue; new deployment should be green.
//                             env.DEPLOY_COLOR = 'green'
//                             env.OTHER_COLOR = 'blue'
//                         } else {
//                             // Fallback: Check ready replicas if the svc selector is not as expected.
//                             def blueReady = sh(
//                                 script: "ssh ${KUBE_HOST} 'kubectl get deployment backend-deployment-blue -o jsonpath=\"{.status.readyReplicas}\"' || echo '0'",
//                                 returnStdout: true
//                             ).trim()
//                             def greenReady = sh(
//                                 script: "ssh ${KUBE_HOST} 'kubectl get deployment backend-deployment-green -o jsonpath=\"{.status.readyReplicas}\"' || echo '0'",
//                                 returnStdout: true
//                             ).trim()
//                             echo "Blue ready replicas: ${blueReady}"
//                             echo "Green ready replicas: ${greenReady}"
//
//                             if (blueReady == '0' && greenReady != '0') {
//                                 env.DEPLOY_COLOR = 'blue'
//                                 env.OTHER_COLOR = 'green'
//                             } else if (blueReady != '0' && greenReady == '0') {
//                                 env.DEPLOY_COLOR = 'green'
//                                 env.OTHER_COLOR = 'blue'
//                             } else {
//                                 // If ambiguous, default to deploying blue.
//                                 env.DEPLOY_COLOR = 'blue'
//                                 env.OTHER_COLOR = 'green'
//                             }
//                         }
//                         echo "Deploying ${env.DEPLOY_COLOR} version (scaling down ${env.OTHER_COLOR} later)"
//                     } catch (Exception e) {
//                         echo "Error determining deploy color: ${e.getMessage()}"
//                         // On error, default to blue deployment.
//                         env.DEPLOY_COLOR = 'blue'
//                         env.OTHER_COLOR = 'green'
//                     }
//                 }
//             }
//         }

        stage('Determine Deploy Color') {
            // when {
            //     expression { env.GIT_BRANCH == 'origin/main' }
            // }
            steps {
                script {
                    def blueReplicas = sh(
                        script: "ssh ${KUBE_HOST} 'kubectl get deployment backend-deployment-blue -o jsonpath=\"{.spec.replicas}\"' || echo '0'",
                        returnStdout: true
                    ).trim()
                    def greenReplicas = sh(
                        script: "ssh ${KUBE_HOST} 'kubectl get deployment backend-deployment-green -o jsonpath=\"{.spec.replicas}\"' || echo '0'",
                        returnStdout: true
                    ).trim()

                    int blueCount = 0
                    int greenCount = 0
                    try { blueCount = blueReplicas.toInteger() } catch (Exception e) {}
                    try { greenCount = greenReplicas.toInteger() } catch (Exception e) {}


                    if (blueCount > 0 && greenCount == 0) {
                        deployColor = "green"
                        otherColor = "blue"
                    } else if (greenCount > 0 && blueCount == 0) {
                        deployColor = "blue"
                        otherColor = "green"
                    } else if (blueCount > 0 && greenCount > 0) {
                        deployColor = "green"
                        otherColor = "blue"
                    } else {
                        deployColor = "blue"
                        otherColor = "green"
                    }

                    echo "Deploying ${deployColor} version (scaling down ${otherColor})"
                }
            }
            post {
                success {
                    sendDiscordMessage("✅ 배포 색상 결정 완료!", "${deployColor}로 배포 진행 예정", "GREEN")
                }
                failure {
                    sendDiscordMessage("❌ 배포 색상 결정 실패!", "replica 확인 중 오류 발생", "RED")
                }
            }
        }

//         stage('Deploy Blue-Green') {
//             when {
//                 expression { env.GIT_BRANCH == 'origin/dev' }
//             }
//             steps {
//                 script {
//                     def deployColor = env.DEPLOY_COLOR ?: 'blue'
//                     def otherColor = env.OTHER_COLOR ?: 'green'
//
//                     echo "Deploying ${deployColor} version"
//
//                     // 1. 배포 파일의 이미지 태그 업데이트 후 전송
//                     sh """
//                         sed -i "s/latest/${IMAGE_TAG}/g" ${WORKSPACE}/backend/k8s/backend-deployment-${deployColor}.yml
//                     """
//                     sh """
//                         scp ${WORKSPACE}/backend/k8s/backend-deployment-${deployColor}.yml ${KUBE_HOST}:/home/test/backend/k8s/
//                     """
//
//                     // 2. 새 배포 적용 및 스케일 업
//                     sh """
//                         ssh ${KUBE_HOST} 'kubectl apply -f /home/test/backend/k8s/backend-deployment-${deployColor}.yml'
//                         ssh ${KUBE_HOST} 'kubectl scale deployment backend-deployment-${deployColor} --replicas=2'
//                     """
//
//                     // 3. 새 배포 롤아웃 상태 체크
//                     sh """
//                         ssh ${KUBE_HOST} 'kubectl rollout status deployment/backend-deployment-${deployColor} --timeout=5m'
//                     """
//
//                     // 4. 서비스 YAML 파일 내 selector 업데이트
//                     // 기존 "app: backend-..." 패턴 전체를 새로운 배포 색상으로 교체
//                     sh """
//                         sed -i "s/app: backend-.*\$/app: backend-${deployColor}/" ${WORKSPACE}/backend/k8s/backend-svc.yml
//                     """
//                     sh """
//                         scp ${WORKSPACE}/backend/k8s/backend-svc.yml ${KUBE_HOST}:/home/test/backend/k8s/
//                     """
//                     sh """
//                         ssh ${KUBE_HOST} 'kubectl apply -f /home/test/backend/k8s/backend-svc.yml'
//                     """
//
//                     // 5. 기존 배포(다른 색상)의 스케일 다운
//                     sh """
//                         ssh ${KUBE_HOST} 'kubectl scale deployment backend-deployment-${otherColor} --replicas=0'
//                     """
//                 }
//             }
//             post {
//                 success {
//                     sendDiscordMessage("✅ Blue-Green 배포 성공!", "${env.DEPLOY_COLOR} 버전 배포 완료", "GREEN")
//                 }
//                 failure {
//                     sendDiscordMessage("❌ Blue-Green 배포 실패!", "배포 중 오류 발생", "RED")
//                 }
//             }
//         }
        stage('Deploy Blue-Green') {
            // when {
            //     expression { env.GIT_BRANCH == 'origin/main' }
            // }
            steps {
                script {
                    sh """
                        sed -i "s/latest/${IMAGE_TAG}/g" ${WORKSPACE}/backend/k8s/backend-deployment-${deployColor}.yml
                        sed -i "s/latest/${IMAGE_TAG}/g" ${WORKSPACE}/backend/k8s/backend-cm.yml
                        sed -i "s/latest/${IMAGE_TAG}/g" ${WORKSPACE}/backend/k8s/backend-svc.yml
                        scp ${WORKSPACE}/backend/k8s/backend-deployment-${deployColor}.yml ${KUBE_HOST}:/home/test/backend/k8s/
                        scp ${WORKSPACE}/backend/k8s/backend-cm.yml ${KUBE_HOST}:/home/test/backend/k8s/
                        scp ${WORKSPACE}/backend/k8s/backend-svc.yml ${KUBE_HOST}:/home/test/backend/k8s/
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/backend/k8s/backend-cm.yml'
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/backend/k8s/backend-svc.yml'
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/backend/k8s/backend-deployment-${deployColor}.yml'
                        ssh ${KUBE_HOST} 'kubectl rollout status deployment/backend-deployment-${deployColor}'
                        ssh ${KUBE_HOST} 'kubectl scale deployment backend-deployment-${otherColor} --replicas=0' || true
                    """
                }
            }
            post {
                success {
                    sendDiscordMessage("✅ Blue-Green 배포 성공!", "${deployColor}로 트래픽 전환 완료", "GREEN")
                }
                failure {
                    sendDiscordMessage("❌ Blue-Green 배포 실패!", "배포 중 오류 발생", "RED")
                }
            }
        }

        stage('Update Service Selector') {
            steps {
                script {
                    echo "Updating service selector to deployment: ${deployColor}"
                    sh """
                        echo '{"spec":{"selector":{"deployment":"${deployColor}","type":"backend"}}}' > /tmp/patch2.json
                        scp /tmp/patch2.json ${KUBE_HOST}:/tmp/patch2.json
                        ssh ${KUBE_HOST} "kubectl patch svc backend-svc -p '\$(cat /tmp/patch2.json)'"
                        ssh ${KUBE_HOST} 'rm /tmp/patch2.json'
                        rm /tmp/patch2.json
                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    echo "Verifying deployment health..."
                }
            }
            post {
                success {
                    sendDiscordMessage("✅ 배포 검증 성공!", "헬스체크 통과", "GREEN")
                }
                failure {
                    sendDiscordMessage("❌ 배포 검증 실패!", "헬스체크 실패", "RED")
                }
            }
        }

        stage('Update Backend Service Selector') {
          steps {
            script {
              echo "Updating backend-svc selector to deployment: ${env.DEPLOY_COLOR}"
              sh """
                ssh -o StrictHostKeyChecking=no ${KUBE_HOST} << 'EOCMD'
        cat > /home/test/patch-backend-selector.json << 'EOF'
        {"spec":{"selector":{"type":"backend","deployment":"${env.DEPLOY_COLOR}"}}}
        EOF
        kubectl patch svc backend-svc --type=merge --patch-file /home/test/patch-backend-selector.json
        EOCMD
              """
            }
          }
          post {
            success { echo "✅ backend-svc selector updated" }
            failure { echo "❌ Failed to update backend-svc selector" }
          }
        }


        stage('End Timer') {
            steps {
                script {
                    def endTime = System.currentTimeMillis()
                    def duration = (endTime - startTime) / 1000
                    echo "⏱️ 전체 파이프라인 실행 시간: ${duration}초"
                }
            }
        }
    }

    post {
        success {
            script {
                def endTime = System.currentTimeMillis()
                def duration = (endTime - startTime) / 1000
                sendDiscordMessage("🎉 전체 파이프라인 성공!", "⏱️ 실행 시간: ${duration}초", "GREEN")
            }
        }
        failure {
            script {
                def endTime = System.currentTimeMillis()
                def duration = (endTime - startTime) / 1000
                sendDiscordMessage("🚨 전체 파이프라인 실패!", "⏱️ 실행 시간: ${duration}초", "RED")
            }
        }
    }
}
