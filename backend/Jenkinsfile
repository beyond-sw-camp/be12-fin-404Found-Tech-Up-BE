pipeline {
    agent any

    options {
        timestamps()
    }

    environment {
        IMAGE_NAME = 'mstar228/techup-backend'
        IMAGE_TAG = "1.0.${BUILD_NUMBER}"
        PATH = "/usr/local/bin:${env.PATH}"
        // ÌÅ¨Î¶¨Îç¥ÏÖúÏóêÏÑú ÌôòÍ≤Ω Î≥ÄÏàò Í∞ÄÏ†∏Ïò§Í∏∞
        DB_URL = credentials('DB_URL')
        DB_USERNAME = credentials('DB_USERNAME')
        DB_PASSWORD = credentials('DB_PASSWORD')
        JWT_SECRET = credentials('JWT_SECRET')
        JWT_EXPIRATION = credentials('JWT_EXPIRATION')
        BACKEND_URL = credentials('BACKEND_URL')
        EC2_HOST = "ubuntu@${BACKEND_URL}"
//         KAKAO_CLIENT_ID     = credentials('KAKAO_CLIENT_ID')
//         KAKAO_REDIRECT_URI  = credentials('KAKAO_REDIRECT_URI')
//         PORTONE_CHANNEL_KEY= credentials('PORTONE_CHANNEL_KEY')
//         PORTONE_SECRET     = credentials('PORTONE_SECRET')
//         PORTONE_STOREID    = credentials('PORTONE_STOREID')
//         MAIL_ADDR          = credentials('MAIL_ADDR')
//         MAIL_PASSWORD      = credentials('MAIL_PASSWORD')

        // kubernetes ÌôòÍ≤ΩÎ≥ÄÏàò
        KUBE_HOST = credentials('KUBE_HOST')
    }

    stages {
        stage('Start Timer') {
            steps {
                script {
                    startTime = System.currentTimeMillis()
                }
            }
        }

        stage('Git Clone') {
            steps {
                echo "Cloning Repository"
                git url: 'https://github.com/beyond-sw-camp/be12-fin-404Found-Tech-Up-BE.git',
                    branch: "${env.GIT_BRANCH.replace('origin/', '')}"
            }
        }

        stage('Gradle Build') {
            steps {
                echo "Building Project"
                sh '''
                    echo "Add Permission"
                    chmod +x ${WORKSPACE}/backend/gradlew
                    echo "Cleaning previous build"
                    rm -rf ${WORKSPACE}/backend/build
                    echo "Running Gradle build"
                    cd ${WORKSPACE}/backend && ./gradlew bootJar
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker Image ${IMAGE_NAME}:${IMAGE_TAG}"
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}", "${WORKSPACE}/backend")
                }
            }
        }

        stage('Push to Registry') {
            steps {
                script {
                    echo "Pushing Docker Image ${IMAGE_NAME}:${IMAGE_TAG} to Registry"
                    withDockerRegistry([credentialsId: 'DOCKER_HUB']) {
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push('latest')
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            when {
                expression { env.GIT_BRANCH == 'origin/main' }
            }
            steps {
                script {
                    echo "MODIFY DOCKER-COMPOSE.YML"
                    sh """
                        sed -i 's|mstar228/techup-backend:latest|mstar228/techup-backend:${IMAGE_TAG}|' ${WORKSPACE}/backend/docker-compose.yml
                    """

                    echo "CREATE .ENV"
                    sh """
                        ssh -o StrictHostKeyChecking=no ${EC2_HOST} <<EOF
                        cat > /home/ubuntu/.env <<EOL
                        DB_URL=${DB_URL}
                        DB_USERNAME=${DB_USERNAME}
                        DB_PASSWORD=${DB_PASSWORD}
                        JWT_SECRET=${JWT_SECRET}
                        JWT_EXPIRATION=${JWT_EXPIRATION}
                        KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}
                        KAKAO_REDIRECT_URI=${KAKAO_REDIRECT_URI}
                        PORTONE_CHANNEL_KEY=${PORTONE_CHANNEL_KEY}
                        PORTONE_SECRET=${PORTONE_SECRET}
                        PORTONE_STOREID=${PORTONE_STOREID}
                        MAIL_ADDR=${MAIL_ADDR}
                        MAIL_PASSWORD=${MAIL_PASSWORD}
                        EOL
                        EOF
                    """

                    echo "SCP DOCKER-COMPOSE.YML"
                    sh """
                        ssh -o StrictHostKeyChecking=no ${EC2_HOST} "[ -f /home/ubuntu/docker-compose.yml ] && echo 'File exists, overwriting' || echo 'File does not exist'"
                        scp -o StrictHostKeyChecking=no ${WORKSPACE}/backend/docker-compose.yml ${EC2_HOST}:/home/ubuntu/docker-compose.yml
                    """

                    echo "RUN DOCKER-COMPOSE"
                    sh """
                        ssh -o StrictHostKeyChecking=no ${EC2_HOST} <<'EOF'
                        docker-compose -f /home/ubuntu/docker-compose.yml down  # Í∏∞Ï°¥ Ïª®ÌÖåÏù¥ÎÑà Ï§ëÏßÄ Î∞è ÏÇ≠Ï†ú
                        docker-compose -f /home/ubuntu/docker-compose.yml up -d  # ÏÉà Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ
                    """
                }
            }
        }

        stage('Determine Deploy Color') {
            steps {
                script {
                    def svcColor = sh(
                        script: "ssh ${KUBE_HOST} \"kubectl get svc backend-svc -o jsonpath='{.spec.selector.app}'\"",
                        returnStdout: true
                    ).trim()
                    echo "Service currently routing to: ${svcColor}"

                    if (svcColor == 'backend-blue') {
                        env.DEPLOY_COLOR = 'green'
                        env.OTHER_COLOR  = 'blue'
                    } else {
                        env.DEPLOY_COLOR = 'blue'
                        env.OTHER_COLOR  = 'green'
                    }
                    echo "‚Üí Will deploy: ${env.DEPLOY_COLOR} (and scale down ${env.OTHER_COLOR})"
                }
            }
        }

        stage('Deploy Blue-Green') {
            when {
                branch 'dev'
            }
            steps {
                script {
                    def deployColor = env.DEPLOY_COLOR ?: 'blue'
                    def otherColor = env.OTHER_COLOR ?: 'green'

                    echo "Deploying ${deployColor} version"

                    // 1. Î∞∞Ìè¨ ÌååÏùºÏùò Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏ ÏóÖÎç∞Ïù¥Ìä∏ ÌõÑ Ï†ÑÏÜ°
                    sh """
                        sed -i "s/latest/${IMAGE_TAG}/g" ${WORKSPACE}/backend/k8s/backend-deployment-${deployColor}.yml
                    """
                    sh """
                        scp ${WORKSPACE}/backend/k8s/backend-deployment-${deployColor}.yml ${KUBE_HOST}:/home/test/backend/k8s/
                    """

                    // 2. ÏÉà Î∞∞Ìè¨ Ï†ÅÏö© Î∞è Ïä§ÏºÄÏùº ÏóÖ
                    sh """
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/backend/k8s/backend-deployment-${deployColor}.yml'
                        ssh ${KUBE_HOST} 'kubectl scale deployment backend-deployment-${deployColor} --replicas=2'
                    """

                    // 3. ÏÉà Î∞∞Ìè¨ Î°§ÏïÑÏõÉ ÏÉÅÌÉú Ï≤¥ÌÅ¨
                    sh """
                        ssh ${KUBE_HOST} 'kubectl rollout status deployment/backend-deployment-${deployColor} --timeout=5m'
                    """

                    // 4. ÏÑúÎπÑÏä§ YAML ÌååÏùº ÎÇ¥ selector ÏóÖÎç∞Ïù¥Ìä∏
                    // Í∏∞Ï°¥ "app: backend-..." Ìå®ÌÑ¥ Ï†ÑÏ≤¥Î•º ÏÉàÎ°úÏö¥ Î∞∞Ìè¨ ÏÉâÏÉÅÏúºÎ°ú ÍµêÏ≤¥
                    sh """
                        sed -i "s/app: backend-.*\$/app: backend-${deployColor}/" ${WORKSPACE}/backend/k8s/backend-svc.yml
                    """
                    sh """
                        scp ${WORKSPACE}/backend/k8s/backend-svc.yml ${KUBE_HOST}:/home/test/backend/k8s/
                    """
                    sh """
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/backend/k8s/backend-svc.yml'
                    """

                    // 5. Í∏∞Ï°¥ Î∞∞Ìè¨(Îã§Î•∏ ÏÉâÏÉÅ)Ïùò Ïä§ÏºÄÏùº Îã§Ïö¥
                    sh """
                        ssh ${KUBE_HOST} 'kubectl scale deployment backend-deployment-${otherColor} --replicas=0'
                    """
                }
            }
            post {
                success {
                    sendDiscordMessage("‚úÖ Blue-Green Î∞∞Ìè¨ ÏÑ±Í≥µ!", "${env.DEPLOY_COLOR} Î≤ÑÏ†Ñ Î∞∞Ìè¨ ÏôÑÎ£å", "GREEN")
                }
                failure {
                    sendDiscordMessage("‚ùå Blue-Green Î∞∞Ìè¨ Ïã§Ìå®!", "Î∞∞Ìè¨ Ï§ë Ïò§Î•ò Î∞úÏÉù", "RED")
                }
            }
        }

        stage('End Timer') {
            steps {
                script {
                    def endTime = System.currentTimeMillis()
                    def duration = (endTime - startTime) / 1000
                    echo "‚è±Ô∏è Ï†ÑÏ≤¥ ÌååÏù¥ÌîÑÎùºÏù∏ Ïã§Ìñâ ÏãúÍ∞Ñ: ${duration}Ï¥à"
                }
            }
        }
    }

    post {
        success {
            script {
                def endTime = System.currentTimeMillis()
                def duration = (endTime - startTime) / 1000
                sendDiscordMessage("üéâ Ï†ÑÏ≤¥ ÌååÏù¥ÌîÑÎùºÏù∏ ÏÑ±Í≥µ!", "‚è±Ô∏è Ïã§Ìñâ ÏãúÍ∞Ñ: ${duration}Ï¥à", "GREEN")
            }
        }
        failure {
            script {
                def endTime = System.currentTimeMillis()
                def duration = (endTime - startTime) / 1000
                sendDiscordMessage("üö® Ï†ÑÏ≤¥ ÌååÏù¥ÌîÑÎùºÏù∏ Ïã§Ìå®!", "‚è±Ô∏è Ïã§Ìñâ ÏãúÍ∞Ñ: ${duration}Ï¥à", "RED")
            }
        }
    }
}

// Ï†ÑÏó≠ Ìï®Ïàò ÏÑ†Ïñ∏ (pipeline Ïô∏Î∂Ä)
def sendDiscordMessage(String title, String description, String color) {
    withCredentials([string(credentialsId: 'Discord-Webhook', variable: 'DISCORD')]) {
        discordSend(
            description: description,
            footer: "Jenkins CI/CD",
            link: env.BUILD_URL,
            result: currentBuild.currentResult,
            title: title,
            color: color,
            webhookURL: "$DISCORD"
        )
    }
}
